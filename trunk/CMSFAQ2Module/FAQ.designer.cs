#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Carrotware.CMS.UI.Plugins.FAQ2Module
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CarrotwareCMS")]
	public partial class FAQDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertcarrot_FaqCategory(carrot_FaqCategory instance);
    partial void Updatecarrot_FaqCategory(carrot_FaqCategory instance);
    partial void Deletecarrot_FaqCategory(carrot_FaqCategory instance);
    partial void Insertcarrot_FaqItem(carrot_FaqItem instance);
    partial void Updatecarrot_FaqItem(carrot_FaqItem instance);
    partial void Deletecarrot_FaqItem(carrot_FaqItem instance);
    #endregion
		
		public FAQDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CarrotwareCMSConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FAQDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FAQDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FAQDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FAQDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<carrot_FaqCategory> carrot_FaqCategories
		{
			get
			{
				return this.GetTable<carrot_FaqCategory>();
			}
		}
		
		public System.Data.Linq.Table<carrot_FaqItem> carrot_FaqItems
		{
			get
			{
				return this.GetTable<carrot_FaqItem>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.carrot_FaqCategory")]
	public partial class carrot_FaqCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _FaqCategoryID;
		
		private string _FAQTitle;
		
		private System.Nullable<System.Guid> _SiteID;
		
		private EntitySet<carrot_FaqItem> _carrot_FaqItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFaqCategoryIDChanging(System.Guid value);
    partial void OnFaqCategoryIDChanged();
    partial void OnFAQTitleChanging(string value);
    partial void OnFAQTitleChanged();
    partial void OnSiteIDChanging(System.Nullable<System.Guid> value);
    partial void OnSiteIDChanged();
    #endregion
		
		public carrot_FaqCategory()
		{
			this._carrot_FaqItems = new EntitySet<carrot_FaqItem>(new Action<carrot_FaqItem>(this.attach_carrot_FaqItems), new Action<carrot_FaqItem>(this.detach_carrot_FaqItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FaqCategoryID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid FaqCategoryID
		{
			get
			{
				return this._FaqCategoryID;
			}
			set
			{
				if ((this._FaqCategoryID != value))
				{
					this.OnFaqCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._FaqCategoryID = value;
					this.SendPropertyChanged("FaqCategoryID");
					this.OnFaqCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FAQTitle", DbType="VarChar(255)")]
		public string FAQTitle
		{
			get
			{
				return this._FAQTitle;
			}
			set
			{
				if ((this._FAQTitle != value))
				{
					this.OnFAQTitleChanging(value);
					this.SendPropertyChanging();
					this._FAQTitle = value;
					this.SendPropertyChanged("FAQTitle");
					this.OnFAQTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SiteID
		{
			get
			{
				return this._SiteID;
			}
			set
			{
				if ((this._SiteID != value))
				{
					this.OnSiteIDChanging(value);
					this.SendPropertyChanging();
					this._SiteID = value;
					this.SendPropertyChanged("SiteID");
					this.OnSiteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="carrot_FaqCategory_carrot_FaqItem", Storage="_carrot_FaqItems", ThisKey="FaqCategoryID", OtherKey="FaqCategoryID")]
		public EntitySet<carrot_FaqItem> carrot_FaqItems
		{
			get
			{
				return this._carrot_FaqItems;
			}
			set
			{
				this._carrot_FaqItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_carrot_FaqItems(carrot_FaqItem entity)
		{
			this.SendPropertyChanging();
			entity.carrot_FaqCategory = this;
		}
		
		private void detach_carrot_FaqItems(carrot_FaqItem entity)
		{
			this.SendPropertyChanging();
			entity.carrot_FaqCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.carrot_FaqItem")]
	public partial class carrot_FaqItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _FaqItemID;
		
		private System.Guid _FaqCategoryID;
		
		private int _ItemOrder;
		
		private bool _IsActive;
		
		private string _Caption;
		
		private string _Question;
		
		private string _Answer;
		
		private EntityRef<carrot_FaqCategory> _carrot_FaqCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFaqItemIDChanging(System.Guid value);
    partial void OnFaqItemIDChanged();
    partial void OnFaqCategoryIDChanging(System.Guid value);
    partial void OnFaqCategoryIDChanged();
    partial void OnItemOrderChanging(int value);
    partial void OnItemOrderChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnCaptionChanging(string value);
    partial void OnCaptionChanged();
    partial void OnQuestionChanging(string value);
    partial void OnQuestionChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    #endregion
		
		public carrot_FaqItem()
		{
			this._carrot_FaqCategory = default(EntityRef<carrot_FaqCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FaqItemID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid FaqItemID
		{
			get
			{
				return this._FaqItemID;
			}
			set
			{
				if ((this._FaqItemID != value))
				{
					this.OnFaqItemIDChanging(value);
					this.SendPropertyChanging();
					this._FaqItemID = value;
					this.SendPropertyChanged("FaqItemID");
					this.OnFaqItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FaqCategoryID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FaqCategoryID
		{
			get
			{
				return this._FaqCategoryID;
			}
			set
			{
				if ((this._FaqCategoryID != value))
				{
					if (this._carrot_FaqCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFaqCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._FaqCategoryID = value;
					this.SendPropertyChanged("FaqCategoryID");
					this.OnFaqCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemOrder", DbType="Int NOT NULL")]
		public int ItemOrder
		{
			get
			{
				return this._ItemOrder;
			}
			set
			{
				if ((this._ItemOrder != value))
				{
					this.OnItemOrderChanging(value);
					this.SendPropertyChanging();
					this._ItemOrder = value;
					this.SendPropertyChanged("ItemOrder");
					this.OnItemOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Caption", DbType="VarChar(128)")]
		public string Caption
		{
			get
			{
				return this._Caption;
			}
			set
			{
				if ((this._Caption != value))
				{
					this.OnCaptionChanging(value);
					this.SendPropertyChanging();
					this._Caption = value;
					this.SendPropertyChanged("Caption");
					this.OnCaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question", DbType="VarChar(MAX)")]
		public string Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				if ((this._Question != value))
				{
					this.OnQuestionChanging(value);
					this.SendPropertyChanging();
					this._Question = value;
					this.SendPropertyChanged("Question");
					this.OnQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="VarChar(MAX)")]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="carrot_FaqCategory_carrot_FaqItem", Storage="_carrot_FaqCategory", ThisKey="FaqCategoryID", OtherKey="FaqCategoryID", IsForeignKey=true)]
		public carrot_FaqCategory carrot_FaqCategory
		{
			get
			{
				return this._carrot_FaqCategory.Entity;
			}
			set
			{
				carrot_FaqCategory previousValue = this._carrot_FaqCategory.Entity;
				if (((previousValue != value) 
							|| (this._carrot_FaqCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._carrot_FaqCategory.Entity = null;
						previousValue.carrot_FaqItems.Remove(this);
					}
					this._carrot_FaqCategory.Entity = value;
					if ((value != null))
					{
						value.carrot_FaqItems.Add(this);
						this._FaqCategoryID = value.FaqCategoryID;
					}
					else
					{
						this._FaqCategoryID = default(System.Guid);
					}
					this.SendPropertyChanged("carrot_FaqCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
